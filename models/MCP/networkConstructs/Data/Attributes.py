from typing import Any

from pydantic import BaseModel


class DisplayData(BaseModel):
    displayName: str = str()
    displayIpAddress: str = str()
    displayMACAddress: str = str()
    displaySyncState: str = str()
    displayResourceState: str = str()
    displayInventorySyncFailureReason: str = str()
    displayAssociationState: str = str()
    displayPhysicalLocationName: str = str()
    displayMapSiteName: str = str()
    displayVendorName: str = str()
    displayAbbResourceType: str = str()


class L2motrBandwidthProfile(BaseModel):
    bwprfIndex: str = str()
    bwprfName: str = str()
    bwprfPolicer: str = str()


class MemberShelvesDatum(BaseModel):
    shelfNumber: str = str()
    shelfIP: str = str()
    estimatedPower: str = str()
    colanIP: str = str()
    GNE: str = str()
    l2motrBandwidthProfiles: list[L2motrBandwidthProfile] = list()
    role: str = str()


class Attributes(BaseModel):
    displayData: DisplayData = DisplayData()
    identifiers: list[dict[str, Any]] = list()
    userData: dict[str, Any] = dict()
    syncState: dict[str, Any] = dict()
    roaSyncState: dict[str, Any] = dict()
    resourceState: str = str()
    managementOwnerType: str = str()
    policies: dict[str, Any] = dict()
    tags: list[str] = list()
    note: dict[str, Any] = dict()
    inventoryOutOfSync: bool = bool()
    overrideMemberNEPartition: bool = bool()
    isStreamingCapable: bool = bool()
    ipAddress: str = str()
    typeGroup: str = str()
    resourceType: str = str()
    deviceType: str = str()
    softwareVersion: str = str()
    nativeSoftwareVersion: str = str()
    accessIdentifier: str = str()
    macAddress: str = str()
    name: str = str()
    longName: str = str()
    geoLocation: dict[str, Any] = dict()
    osrpCapabilitySpecification: dict[str, Any] = dict()
    serialNumber: str = str()
    deviceVersion: str = str()
    softwareType: str = str()
    softwareImage: str = str()
    subnetName: str = str()
    numberOfShelves: int = int()
    memberShelvesData: list[MemberShelvesDatum] = list()
    memberFunction: str = str()
    shelfType: str = str()
    capabilitySpecRef: str = str()
    modelType: str = str()
    networkConstructType: str = str()
    ponData: list = list()
    l2Data: list = list()
    loopbackIpAddresses: list = list()
    l0Data: dict[str, Any] = dict()
    ntp: dict[str, Any] = dict()
    license: dict[str, Any] = dict()
    additionalAttributes: dict[str, Any] = dict()
    resourcePartitionInfo: list[str] = list()
    resourcePartitions: list[list[str]] = list()
    associationState: str = str()
    associationStateQualifier: str = str()
    associationStateQualifierReason: str = str()
    associationStateLastUpdatedTime: str = str()
    ipCommunicationDetails: dict[str, Any] = dict()
    srlg: list[str] = list()
    managementAddresses: list[str] = list()
    shareSrlg: list[str] = list()
    siteId: str = str()
    siteName: str = str()
    packetData: list = list()
    vendor: str = str()
    aggregatedLocation: str = str()
    aggregatedNetworkElementName: str = str()
    dcn: dict[str, Any] = dict()
    neName: str = str()
    protocolOperationalState: str = str()
